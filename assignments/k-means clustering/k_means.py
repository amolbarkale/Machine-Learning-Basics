# -*- coding: utf-8 -*-
"""K-means.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ma_pI6e-8NyGZzBt6va7Vf8U-RjQ6TDL
"""



# Commented out IPython magic to ensure Python compatibility.
# %pip install pandas numpy matplotlib seaborn scikit-learn

import pandas as pd

# Load the dataset
df = pd.read_csv('Mall_Customers.csv')

# Drop the CustomerID column
df = df.drop('CustomerID', axis=1)

# Convert 'Gender' column to 'is_male' (1 for Male, 0 for Female)
df['is_male'] = df['Gender'].apply(lambda x: 1 if x == 'Male' else 0)

# Drop the original 'Gender' column
df = df.drop('Gender', axis=1)

# Display the first few rows of the modified DataFrame
display(df.head())

from sklearn.preprocessing import MinMaxScaler

# Initialize the MinMaxScaler
scaler = MinMaxScaler()

# Select the columns to scale
columns_to_scale = ['Annual Income (k$)', 'Spending Score (1-100)', 'Age']

# Apply the scaler to the selected columns
df[columns_to_scale] = scaler.fit_transform(df[columns_to_scale])

# Display the first few rows of the scaled DataFrame
display(df.head())

"""# Task
Perform K-means clustering on the scaled data from the "Mall_Customers.csv" file, using k=4, and visualize the results with the Silhouette score.

## Determine the optimal number of clusters (k)

### Subtask:
Determine the optimal number of clusters (k) using the Silhouette score.

**Reasoning**:
I will import necessary libraries, create a list to store silhouette scores, iterate through possible k values, fit KMeans, calculate silhouette scores, and then plot the scores to find the optimal k.
"""

from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
import matplotlib.pyplot as plt

# Create an empty list to store silhouette scores
silhouette_scores = []

# Define a range of possible k values to test
k_values = range(2, 11)

# Iterate through different k values
for k in k_values:
    # Initialize KMeans model
    kmeans = KMeans(n_clusters=k, random_state=42, n_init=10)

    # Fit KMeans to the scaled data
    kmeans.fit(df)

    # Calculate the silhouette score
    score = silhouette_score(df, kmeans.labels_)

    # Append the score to the list
    silhouette_scores.append(score)

# Plot the silhouette scores
plt.figure(figsize=(10, 6))
plt.plot(k_values, silhouette_scores, marker='o')
plt.title('Silhouette Score vs. Number of Clusters')
plt.xlabel('Number of Clusters (k)')
plt.ylabel('Silhouette Score')
plt.xticks(k_values)
plt.grid(True)
plt.show()

# Find the optimal k based on the highest silhouette score
optimal_k = k_values[silhouette_scores.index(max(silhouette_scores))]
print(f"The optimal number of clusters based on the Silhouette score is: {optimal_k}")

"""## Apply k-means clustering

### Subtask:
Perform K-means clustering on the scaled data using k=4.

**Reasoning**:
Import the KMeans class and perform KMeans clustering with k=4.
"""

from sklearn.cluster import KMeans

# Instantiate KMeans model with n_clusters=4 and random_state=42
kmeans_model = KMeans(n_clusters=4, random_state=42, n_init=10)

# Fit the KMeans model to the scaled DataFrame
kmeans_model.fit(df)

"""## Add cluster labels to the dataframe

### Subtask:
Add the cluster labels obtained from the K-means model to the DataFrame.

**Reasoning**:
Access the cluster labels from the fitted KMeans model and add them as a new column to the DataFrame. Then display the first few rows to verify the changes.
"""

# Access the cluster labels
cluster_labels = kmeans_model.labels_

# Add a new column named 'cluster_label' to the DataFrame
df['cluster_label'] = cluster_labels

# Display the first few rows of the modified DataFrame
display(df.head())

"""## Visualize the clusters

### Subtask:
Create visualizations to show the clusters based on the relevant features (e.g., 'Annual Income (k$)' and 'Spending Score (1-100)').

**Reasoning**:
Create a scatter plot to visualize the clusters based on annual income and spending score, colored by cluster label.
"""

import matplotlib.pyplot as plt
import seaborn as sns

# Create a scatter plot
plt.figure(figsize=(10, 6))
sns.scatterplot(x='Annual Income (k$)', y='Spending Score (1-100)', hue='cluster_label', data=df, palette='viridis')

# Add title and labels
plt.title('K-means Clustering of Mall Customers')
plt.xlabel('Annual Income (k$)')
plt.ylabel('Spending Score (1-100)')

# Display the plot
plt.show()

"""## Evaluate the clustering

### Subtask:
Calculate the Silhouette score to evaluate the quality of the clustering.

**Reasoning**:
Calculate the Silhouette score using the scaled data and the cluster labels.
"""

from sklearn.metrics import silhouette_score

# Calculate the Silhouette score
score = silhouette_score(df[['Age', 'Annual Income (k$)', 'Spending Score (1-100)', 'is_male']], df['cluster_label'])

# Print the Silhouette score
print(f"The Silhouette score for the clustering is: {score}")

"""## Interpret the results

### Subtask:
Analyze the characteristics of each cluster to gain insights into customer segmentation.

**Reasoning**:
Group the DataFrame by cluster label and calculate the mean of each feature to analyze cluster characteristics.
"""

# Group by cluster label and calculate the mean of each feature
cluster_characteristics = df.groupby('cluster_label')[['Age', 'Annual Income (k$)', 'Spending Score (1-100)', 'is_male']].mean()

# Display the cluster characteristics
display(cluster_characteristics)

"""## Summary:

### Data Analysis Key Findings

*   The Silhouette score analysis suggested that the optimal number of clusters is 2, based on the highest score.
*   Despite the optimal k being 2 according to the Silhouette score, the task proceeded with k=4 for K-means clustering.
*   The K-means clustering with k=4 was successfully applied to the scaled data, resulting in cluster labels for each customer.
*   A scatter plot visualizing 'Annual Income (k\$)' against 'Spending Score (1-100)' clearly shows four distinct clusters.
*   The Silhouette score for the clustering with k=4 is approximately 0.364.
*   Analysis of the mean characteristics for each of the four clusters revealed distinct customer segments:
    *   Cluster 0: Older males with moderate income and lower spending.
    *   Cluster 1: Older females with moderate income and slightly higher spending than Cluster 0.
    *   Cluster 2: Younger females with moderate income and high spending.
    *   Cluster 3: Younger males with moderate income and very high spending.

### Insights or Next Steps

*   While the Silhouette score suggested k=2, the visualization and cluster characteristics for k=4 reveal meaningful and distinct customer segments. Further analysis could explore why k=4 appears more insightful despite a lower Silhouette score.
*   The identified customer segments can be used for targeted marketing campaigns and personalized customer experiences based on their distinct profiles (e.g., targeting younger high-spending clusters with relevant promotions).

"""