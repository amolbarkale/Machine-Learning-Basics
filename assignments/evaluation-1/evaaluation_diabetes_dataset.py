# -*- coding: utf-8 -*-
"""evaaluation-diabetes-dataset.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fXxOFnGLn277dybs8hQVXRAhkTR1asVW
"""

pip install pandas numpy matplotlib seaborn

import pandas as pd
# 1] EDA
df = pd.read_csv('diabetes.csv')
df

df.info()

df.describe()

#isnull values in all columns
df.isnull().sum()

# Range all values of insulin column in by deviding with 10
import numpy as np

# Test with log conversion ->
# df['Insulin'] = df['Insulin'].apply(lambda x: np.log(x) if x != 0 else 0)

# Test with log float conversion ->
df['Insulin'] = df['Insulin'].apply(lambda x: x/10 if x != 0 else 0)

df

# split data in tran and test
from sklearn.linear_model import LogisticRegression

from sklearn.model_selection import train_test_split

from sklearn.metrics import accuracy_score, precision_score, recall_score, confusion_matrix, roc_auc_score


X = df.drop('Outcome', axis=1)

y = df['Outcome']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

model = LogisticRegression()

model.fit(X_train, y_train)

y_pred = model.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
print("LOGISTIC REGRESSION => \n")
print("Accuracy:", accuracy)
precison = precision_score(y_test, y_pred)
print("Precision:", precison)
recall = recall_score(y_test, y_pred)
print("Recall:", recall)
confusion_mtcx = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:\n", confusion_mtcx)
roc_auc = roc_auc_score(y_test, y_pred)
print("ROC AUC:", roc_auc)

# perform Decision tree classifier
from sklearn.tree import DecisionTreeClassifier

from sklearn.metrics import accuracy_score, precision_score, recall_score, confusion_matrix, roc_auc_score

X = df.drop('Outcome', axis=1)

y = df['Outcome']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

model = DecisionTreeClassifier()

model.fit(X_train, y_train)

y_pred = model.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
print("Decision TREE => \n")
print("Accuracy:", accuracy)
precison = precision_score(y_test, y_pred)
print("Precision:", precison)
recall = recall_score(y_test, y_pred)
print("Recall:", recall)
confusion_mtcx = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:\n", confusion_mtcx)
roc_auc = roc_auc_score(y_test, y_pred)
print("ROC AUC:", roc_auc)

