# -*- coding: utf-8 -*-
"""Pandas.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yrvPRfpSVe7w9VPCGVCrvdN4z_nIG7Gz
"""

import pandas as pd

# Load the train.csv file into a pandas DataFrame
try:
    df = pd.read_csv('train.csv')
    # Display the first 5 rows of the DataFrame
    display(df.head())
except FileNotFoundError:
    print("Error: train.csv not found. Please upload the file or provide the correct path.")
except Exception as e:
    print(f"An error occurred: {e}")

display(df.shape)

display(df.info())

display(df.head(5))

# Create summary
summary = pd.DataFrame({
    "column_name": df.columns,
    "dtype": df.dtypes.values,
    "missing_count": df.isnull().sum().values,
    "unique_values": df.nunique().values
})

# Sort by missing values (descending)
summary = summary.sort_values(by="missing_count", ascending=False).reset_index(drop=True)

print(summary)



columns_to_analyze = ['Pclass', 'Sex', 'Embarked']

for col in columns_to_analyze:
    print(f"Analysis for column: {col}")
    value_counts = df[col].value_counts()
    proportions = df[col].value_counts(normalize=True) * 100

    summary_df = pd.DataFrame({
        'Value Counts': value_counts,
        'Proportions (%)': proportions
    })
    display(summary_df)
    print("\n")

# Filter the DataFrame for female passengers in 1st class older than 30
female_firstclass_over_30 = df[(df['Sex'] == 'female') & (df['Pclass'] == 1) & (df['Age'] > 30)]

# Sort the filtered DataFrame by Fare in descending order and show the top 10 rows
display(female_firstclass_over_30.sort_values(by='Fare', ascending=False).head(100))



# Mean, median, and mode of Age (ignoring missing values)
mean_age = df['Age'].mean()
median_age = df['Age'].median()
mode_age = df['Age'].mode()[0] # mode() can return multiple values, so take the first

print(f"Mean Age: {mean_age}")
print(f"Median Age: {median_age}")
print(f"Mode Age: {mode_age}")
print("\n")

# Mean Fare per Pclass
mean_fare_per_pclass = df.groupby('Pclass')['Fare'].mean()
print("Mean Fare per Pclass:")
display(mean_fare_per_pclass)
print("\n")

# Overall survival rate (mean of Survived)
overall_survival_rate = df['Survived'].mean() * 100
print(f"Overall Survival Rate: {overall_survival_rate:.2f}%")
print("\n")

# Survival rate by Gender
survival_rate_by_gender = df.groupby('Sex')['Survived'].mean() * 100
print("Survival Rate by Gender:")
display(survival_rate_by_gender)

# Impute missing 'Age' values using median age grouped by 'Pclass' and 'Sex'
df['Age_imputed'] = df.groupby(['Pclass', 'Sex'])['Age'].transform(lambda x: x.fillna(x.median()))

# Show before and after missing counts for 'Age'
print("Missing counts for Age before imputation:")
print(df['Age'].isnull().sum())

print("\nMissing counts for Age after imputation:")
print(df['Age_imputed'].isnull().sum())

# Display the first few rows with the new column
display(df[['Age', 'Age_imputed']].head(177))

# Extract Title from Name
df['Title'] = df['Name'].str.extract(' ([A-Za-z]+)\.', expand=False)

# Show the counts for each title
print("Counts for each Title:")
display(df['Title'].value_counts())

# Create FamilySize = SibSp + Parch + 1
df['FamilySize'] = df['SibSp'] + df['Parch'] + 1

# Create IsAlone boolean (True if FamilySize==1)
df['IsAlone'] = (df['FamilySize'] == 1)

# Show survival rate by IsAlone
print("Survival rate by IsAlone:")
display(df.groupby('IsAlone')['Survived'].mean() * 100)

display(df)

# Clean Cabin column: replace missing cabins with 'Unknown'
df['Cabin'] = df['Cabin'].fillna('Unknown')

# Display the first few rows to show the change
display(df[['Cabin']].head())

# Show the counts of 'Unknown' to confirm imputation
print("\nCounts of 'Unknown' in Cabin column:")
print(df['Cabin'].value_counts().head())

# Extract cabin letter (first character of cabin string) into CabinDeck
# If multiple cabins listed, take first. Handle 'Unknown' as 'Unknown'.
df['CabinDeck'] = df['Cabin'].apply(lambda x: x[0] if pd.notnull(x) and x != 'Unknown' else 'Unknown')

# Show the counts for each CabinDeck
print("Counts for each CabinDeck:")
display(df['CabinDeck'].value_counts())

# Show survival rate by CabinDeck
print("Survival rate by CabinDeck:")
display(df.groupby('CabinDeck')['Survived'].mean() * 100)

# Create a small lookup DataFrame ticket_counts with Ticket and how many times that ticket appears (ticket frequency)
ticket_counts = df['Ticket'].value_counts().reset_index()
ticket_counts.columns = ['Ticket', 'TicketCount']

# Merge this back into df as TicketCount
df = df.merge(ticket_counts, on='Ticket', how='left')

# Show top 10 tickets by TicketCount
print("Top 10 tickets by TicketCount:")
display(df.sort_values(by='TicketCount', ascending=False).head(10)[['Ticket', 'TicketCount']])

# Calculate the 99th percentile of the 'Fare' column
percentile_99_fare = df['Fare'].quantile(0.99)

print(f"The 99th percentile of Fare is: {percentile_99_fare:.2f}")

# Identify Outliers: Create a boolean flag column Fare_outlier where True indicates the fare is in the top 1%.
df['Fare_outlier'] = df['Fare'] > percentile_99_fare

# Show the number of outliers
print(f"Number of Fare outliers (top 1%): {df['Fare_outlier'].sum()}")

# Display the rows with outliers
print("\nRows with Fare outliers:")
display(df[df['Fare_outlier']].head())

display(df)

def categorize_age(age):
    if age < 12:
        return 'Child'
    elif 12 <= age <= 17:
        return 'Teen'
    elif 18 <= age <= 30:
        return 'YoungAdult'
    elif 31 <= age <= 60:
        return 'Adult'
    else:
        return 'Senior'

# Create AgeGroup Column
df['AgeGroup'] = df['Age_imputed'].apply(categorize_age)

# Show the counts for each AgeGroup
print("Counts for each AgeGroup:")
display(df['AgeGroup'].value_counts())

# Handle Missing Embarked: Fill missing Embarked with the mode
mode_embarked = df['Embarked'].mode()[0]
df['Embarked'] = df['Embarked'].fillna(mode_embarked)

# Verify that there are no more missing values in Embarked
print("Missing values in Embarked after imputation:")
print(df['Embarked'].isnull().sum())

"""#### “Which combination of features (choose at most 3 features) seems most associated with survival? Use groupby/agg/pivot tables to justify your claim and show the supporting tables/plots.”

After observing the features of table I gathered following observations,

1. Females were priorotized for survival as compare to males
2. Passengers with class 1 (Pclass) priorotized over class 3
3. So, Female with class 1 had highest probability for survival
4. Interesting thing was cabin from B to E had more survial percentage ratio,
5. Also alone person had less survival priority as compare to families (May be they prefered atleast one person from the family for survival over alone person)
"""

